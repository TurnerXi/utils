{
  "stats": {
    "suites": 2,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2017-07-17T18:18:14.002Z",
    "end": "2017-07-17T18:18:14.862Z",
    "duration": 860,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n",
        "suites": [],
        "tests": [
          {
            "title": "concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
            "timedOut": false,
            "duration": 297,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"concat begin...\");\nreturn coll.test_concat([1,2,3]).then(function(data,err){\n\texpect(data).to.be.an(\"array\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "43d614d3-4039-4bfa-9d6d-4a66acc675c1",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
            "timedOut": false,
            "duration": 110,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//async.detect(arr,async function(arr) return bool,callback(err,arr[n once bool returns true])) \nconsole.log(\"detect begin...\");\nreturn coll.test_detect([1,2,3]).then(function(data,err){\n\texpect([1,2,3]).to.include(data);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c5df7502-668b-4215-8d1c-99a389309b96",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
            "timedOut": false,
            "duration": 125,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//async.each(arr,async function(item,callback),funciton(err))\nconsole.log(\"each begin...\");\nreturn coll.test_each([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f5a3c9b0-bb86-45bd-87e7-ebd0a3e698c6",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
            "timedOut": false,
            "duration": 125,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//async.eachOf(arr,async function(item,index,callback),funciton(err))\nconsole.log(\"eachOf begin...\");\nreturn coll.test_eachOf([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "661e8d41-0276-4250-afec-dcdcf2994a0f",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
            "timedOut": false,
            "duration": 109,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//async.every(arr,async function(item,callback),funciton(err,result[called immediatly if callback return false])\nconsole.log(\"every begin...\");\nreturn coll.test_every([0,2,3]).then(function(data,err){\n\t// data value:\n\t// all pass =>true\n\t// one fail =>false immediatly\n\texpect(data).to.not.be.ok;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "97849f3c-e543-4b95-8beb-f1d8197bcf2e",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"filter begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "375ba5e5-b130-4dc2-8ff2-3ea39ee6e060",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"groupBy begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "3cc2ce08-245f-4744-8720-29c7b5623edf",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "map【映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n map【映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"map begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "8f803dfd-838b-48e5-87cb-09bf91d0ab24",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "mapValues【对象值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n mapValues【对象值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"mapValues begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "15ff042f-ade4-4fa8-acec-114f7eb4ca4f",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"reject begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "44267958-4066-4466-be41-157484d61180",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"some begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "b4a92f39-a170-426d-9d73-07f5371a8fac",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"reduce begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "137716d8-5e05-4ca7-9cad-0dafc48a63ae",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"sortBy begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "2e267a87-26d3-4021-bda7-1f969693dcbe",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"transform begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "e0e78c85-cb1e-4f46-b697-988d9f38438e",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\coll.test.js",
        "uuid": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "D:\\coding\\git_repository\\utils\\async_demo\\test\\coll.test.js",
        "passes": [
          {
            "title": "concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
            "timedOut": false,
            "duration": 297,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"concat begin...\");\nreturn coll.test_concat([1,2,3]).then(function(data,err){\n\texpect(data).to.be.an(\"array\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "43d614d3-4039-4bfa-9d6d-4a66acc675c1",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
            "timedOut": false,
            "duration": 110,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//async.detect(arr,async function(arr) return bool,callback(err,arr[n once bool returns true])) \nconsole.log(\"detect begin...\");\nreturn coll.test_detect([1,2,3]).then(function(data,err){\n\texpect([1,2,3]).to.include(data);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c5df7502-668b-4215-8d1c-99a389309b96",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
            "timedOut": false,
            "duration": 125,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//async.each(arr,async function(item,callback),funciton(err))\nconsole.log(\"each begin...\");\nreturn coll.test_each([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f5a3c9b0-bb86-45bd-87e7-ebd0a3e698c6",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
            "timedOut": false,
            "duration": 125,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//async.eachOf(arr,async function(item,index,callback),funciton(err))\nconsole.log(\"eachOf begin...\");\nreturn coll.test_eachOf([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "661e8d41-0276-4250-afec-dcdcf2994a0f",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
            "timedOut": false,
            "duration": 109,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//async.every(arr,async function(item,callback),funciton(err,result[called immediatly if callback return false])\nconsole.log(\"every begin...\");\nreturn coll.test_every([0,2,3]).then(function(data,err){\n\t// data value:\n\t// all pass =>true\n\t// one fail =>false immediatly\n\texpect(data).to.not.be.ok;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "97849f3c-e543-4b95-8beb-f1d8197bcf2e",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"filter begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "375ba5e5-b130-4dc2-8ff2-3ea39ee6e060",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"groupBy begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "3cc2ce08-245f-4744-8720-29c7b5623edf",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "map【映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n map【映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"map begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "8f803dfd-838b-48e5-87cb-09bf91d0ab24",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "mapValues【对象值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n mapValues【对象值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"mapValues begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "15ff042f-ade4-4fa8-acec-114f7eb4ca4f",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"reject begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "44267958-4066-4466-be41-157484d61180",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"some begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "b4a92f39-a170-426d-9d73-07f5371a8fac",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"reduce begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "137716d8-5e05-4ca7-9cad-0dafc48a63ae",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"sortBy begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "2e267a87-26d3-4021-bda7-1f969693dcbe",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
            "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"transform begin...\");",
            "err": {},
            "isRoot": false,
            "uuid": "e0e78c85-cb1e-4f46-b697-988d9f38438e",
            "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 14,
        "totalPasses": 14,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 782,
        "rootEmpty": false
      },
      {
        "title": "async模块Control Flow测试",
        "suites": [],
        "tests": [
          {
            "title": "applyEach【遍历应用】测试：并行遍历，统一回调",
            "fullTitle": "async模块Control Flow测试 applyEach【遍历应用】测试：并行遍历，统一回调",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\"",
            "code": "addContext(this, \"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\");\nvar laugh = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"laughing....\");\n\tcallback2(\"all finished....\");\n}\nvar cry = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"cry.....\");\n\tcallback2(\"all finished....\");\n}\t\nreturn coll.test_applyEach([laugh,cry],\"snooby\",\"test\",function(result){\n\tconsole.log(\"callback1:\"+result);\n},function(results){\n\tconsole.log(\"callback2:\"+results);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "172a5b6e-df45-4ab7-bde3-2d915f0b3231",
            "parentUUID": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "auto【自动任务】测试：自动切换流程控制，返回结果映射",
            "fullTitle": "async模块Control Flow测试 auto【自动任务】测试：自动切换流程控制，返回结果映射",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  \"1.无依赖方法参数为（callback）,callback返回结果\",\n  \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\",\n  \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\"\n]",
            "code": "addContext(this, \"1.无依赖方法参数为（callback）,callback返回结果\");\naddContext(this, \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\");\naddContext(this, \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_auto({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(results,callback){\n\t\tconsole.log(results);\n\t\tcallback(null,\"eat all..\");\n\t}]\n},2,function(err,results){\n\tconsole.log(\"所有结果集合:\"+results);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b5b95002-f044-42a6-97c9-6bb3375e3f5f",
            "parentUUID": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\coll.test.js",
        "uuid": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "D:\\coding\\git_repository\\utils\\async_demo\\test\\coll.test.js",
        "passes": [
          {
            "title": "applyEach【遍历应用】测试：并行遍历，统一回调",
            "fullTitle": "async模块Control Flow测试 applyEach【遍历应用】测试：并行遍历，统一回调",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\"",
            "code": "addContext(this, \"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\");\nvar laugh = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"laughing....\");\n\tcallback2(\"all finished....\");\n}\nvar cry = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"cry.....\");\n\tcallback2(\"all finished....\");\n}\t\nreturn coll.test_applyEach([laugh,cry],\"snooby\",\"test\",function(result){\n\tconsole.log(\"callback1:\"+result);\n},function(results){\n\tconsole.log(\"callback2:\"+results);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "172a5b6e-df45-4ab7-bde3-2d915f0b3231",
            "parentUUID": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "auto【自动任务】测试：自动切换流程控制，返回结果映射",
            "fullTitle": "async模块Control Flow测试 auto【自动任务】测试：自动切换流程控制，返回结果映射",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  \"1.无依赖方法参数为（callback）,callback返回结果\",\n  \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\",\n  \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\"\n]",
            "code": "addContext(this, \"1.无依赖方法参数为（callback）,callback返回结果\");\naddContext(this, \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\");\naddContext(this, \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_auto({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(results,callback){\n\t\tconsole.log(results);\n\t\tcallback(null,\"eat all..\");\n\t}]\n},2,function(err,results){\n\tconsole.log(\"所有结果集合:\"+results);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b5b95002-f044-42a6-97c9-6bb3375e3f5f",
            "parentUUID": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 16,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "2886ecd3-208c-4390-85a3-333c6dd45e98",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
      "timedOut": false,
      "duration": 297,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"concat begin...\");\nreturn coll.test_concat([1,2,3]).then(function(data,err){\n\texpect(data).to.be.an(\"array\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "43d614d3-4039-4bfa-9d6d-4a66acc675c1",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
      "timedOut": false,
      "duration": 110,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//async.detect(arr,async function(arr) return bool,callback(err,arr[n once bool returns true])) \nconsole.log(\"detect begin...\");\nreturn coll.test_detect([1,2,3]).then(function(data,err){\n\texpect([1,2,3]).to.include(data);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c5df7502-668b-4215-8d1c-99a389309b96",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
      "timedOut": false,
      "duration": 125,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//async.each(arr,async function(item,callback),funciton(err))\nconsole.log(\"each begin...\");\nreturn coll.test_each([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f5a3c9b0-bb86-45bd-87e7-ebd0a3e698c6",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
      "timedOut": false,
      "duration": 125,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//async.eachOf(arr,async function(item,index,callback),funciton(err))\nconsole.log(\"eachOf begin...\");\nreturn coll.test_eachOf([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "661e8d41-0276-4250-afec-dcdcf2994a0f",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
      "timedOut": false,
      "duration": 109,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//async.every(arr,async function(item,callback),funciton(err,result[called immediatly if callback return false])\nconsole.log(\"every begin...\");\nreturn coll.test_every([0,2,3]).then(function(data,err){\n\t// data value:\n\t// all pass =>true\n\t// one fail =>false immediatly\n\texpect(data).to.not.be.ok;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "97849f3c-e543-4b95-8beb-f1d8197bcf2e",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"filter begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "375ba5e5-b130-4dc2-8ff2-3ea39ee6e060",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"groupBy begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "3cc2ce08-245f-4744-8720-29c7b5623edf",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "map【映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n map【映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"map begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "8f803dfd-838b-48e5-87cb-09bf91d0ab24",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mapValues【对象值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n mapValues【对象值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"mapValues begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "15ff042f-ade4-4fa8-acec-114f7eb4ca4f",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"reject begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "44267958-4066-4466-be41-157484d61180",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"some begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "b4a92f39-a170-426d-9d73-07f5371a8fac",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"reduce begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "137716d8-5e05-4ca7-9cad-0dafc48a63ae",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"sortBy begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "2e267a87-26d3-4021-bda7-1f969693dcbe",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"transform begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "e0e78c85-cb1e-4f46-b697-988d9f38438e",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "applyEach【遍历应用】测试：并行遍历，统一回调",
      "fullTitle": "async模块Control Flow测试 applyEach【遍历应用】测试：并行遍历，统一回调",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\"",
      "code": "addContext(this, \"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\");\nvar laugh = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"laughing....\");\n\tcallback2(\"all finished....\");\n}\nvar cry = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"cry.....\");\n\tcallback2(\"all finished....\");\n}\t\nreturn coll.test_applyEach([laugh,cry],\"snooby\",\"test\",function(result){\n\tconsole.log(\"callback1:\"+result);\n},function(results){\n\tconsole.log(\"callback2:\"+results);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "172a5b6e-df45-4ab7-bde3-2d915f0b3231",
      "parentUUID": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "auto【自动任务】测试：自动切换流程控制，返回结果映射",
      "fullTitle": "async模块Control Flow测试 auto【自动任务】测试：自动切换流程控制，返回结果映射",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"1.无依赖方法参数为（callback）,callback返回结果\",\n  \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\",\n  \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\"\n]",
      "code": "addContext(this, \"1.无依赖方法参数为（callback）,callback返回结果\");\naddContext(this, \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\");\naddContext(this, \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_auto({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(results,callback){\n\t\tconsole.log(results);\n\t\tcallback(null,\"eat all..\");\n\t}]\n},2,function(err,results){\n\tconsole.log(\"所有结果集合:\"+results);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b5b95002-f044-42a6-97c9-6bb3375e3f5f",
      "parentUUID": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
      "timedOut": false,
      "duration": 297,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"concat begin...\");\nreturn coll.test_concat([1,2,3]).then(function(data,err){\n\texpect(data).to.be.an(\"array\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "43d614d3-4039-4bfa-9d6d-4a66acc675c1",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
      "timedOut": false,
      "duration": 110,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//async.detect(arr,async function(arr) return bool,callback(err,arr[n once bool returns true])) \nconsole.log(\"detect begin...\");\nreturn coll.test_detect([1,2,3]).then(function(data,err){\n\texpect([1,2,3]).to.include(data);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c5df7502-668b-4215-8d1c-99a389309b96",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
      "timedOut": false,
      "duration": 125,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//async.each(arr,async function(item,callback),funciton(err))\nconsole.log(\"each begin...\");\nreturn coll.test_each([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f5a3c9b0-bb86-45bd-87e7-ebd0a3e698c6",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
      "timedOut": false,
      "duration": 125,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//async.eachOf(arr,async function(item,index,callback),funciton(err))\nconsole.log(\"eachOf begin...\");\nreturn coll.test_eachOf([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "661e8d41-0276-4250-afec-dcdcf2994a0f",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
      "timedOut": false,
      "duration": 109,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//async.every(arr,async function(item,callback),funciton(err,result[called immediatly if callback return false])\nconsole.log(\"every begin...\");\nreturn coll.test_every([0,2,3]).then(function(data,err){\n\t// data value:\n\t// all pass =>true\n\t// one fail =>false immediatly\n\texpect(data).to.not.be.ok;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "97849f3c-e543-4b95-8beb-f1d8197bcf2e",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"filter begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "375ba5e5-b130-4dc2-8ff2-3ea39ee6e060",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"groupBy begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "3cc2ce08-245f-4744-8720-29c7b5623edf",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "map【映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n map【映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"map begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "8f803dfd-838b-48e5-87cb-09bf91d0ab24",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mapValues【对象值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n mapValues【对象值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"mapValues begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "15ff042f-ade4-4fa8-acec-114f7eb4ca4f",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"reject begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "44267958-4066-4466-be41-157484d61180",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"some begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "b4a92f39-a170-426d-9d73-07f5371a8fac",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"reduce begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "137716d8-5e05-4ca7-9cad-0dafc48a63ae",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"sortBy begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "2e267a87-26d3-4021-bda7-1f969693dcbe",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
      "fullTitle": "async模块collection测试，说明：\\r\\n  每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都友三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n\r\n  Async提供了很多针对集合的函数，可以简化我们对集合进行异步操作时的步骤。如下：\r\n  forEach：对集合中每个元素进行异步操作\r\n  map：对集合中的每个元素通过异步操作得到另一个值，得到新的集合\r\n  filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\r\n  reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\r\n  reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\r\n  detect：得到集合中满足条件的第一个数据\r\n  sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\r\n  some/any：集合中是否有至少一个元素满足条件\r\n  every/all：集合中是否每个元素都满足条件\r\n  concat：对集合中的元素进行异步操作，将结果集合并成一个数组\r\n transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"transform begin...\");",
      "err": {},
      "isRoot": false,
      "uuid": "e0e78c85-cb1e-4f46-b697-988d9f38438e",
      "parentUUID": "4aac397b-5767-4bab-9ce6-1f2063ec2571",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "applyEach【遍历应用】测试：并行遍历，统一回调",
      "fullTitle": "async模块Control Flow测试 applyEach【遍历应用】测试：并行遍历，统一回调",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\"",
      "code": "addContext(this, \"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\");\nvar laugh = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"laughing....\");\n\tcallback2(\"all finished....\");\n}\nvar cry = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"cry.....\");\n\tcallback2(\"all finished....\");\n}\t\nreturn coll.test_applyEach([laugh,cry],\"snooby\",\"test\",function(result){\n\tconsole.log(\"callback1:\"+result);\n},function(results){\n\tconsole.log(\"callback2:\"+results);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "172a5b6e-df45-4ab7-bde3-2d915f0b3231",
      "parentUUID": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "auto【自动任务】测试：自动切换流程控制，返回结果映射",
      "fullTitle": "async模块Control Flow测试 auto【自动任务】测试：自动切换流程控制，返回结果映射",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"1.无依赖方法参数为（callback）,callback返回结果\",\n  \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\",\n  \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\"\n]",
      "code": "addContext(this, \"1.无依赖方法参数为（callback）,callback返回结果\");\naddContext(this, \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\");\naddContext(this, \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_auto({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(results,callback){\n\t\tconsole.log(results);\n\t\tcallback(null,\"eat all..\");\n\t}]\n},2,function(err,results){\n\tconsole.log(\"所有结果集合:\"+results);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b5b95002-f044-42a6-97c9-6bb3375e3f5f",
      "parentUUID": "a12a6eee-0da7-4a39-9613-afe01c3e74c6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}