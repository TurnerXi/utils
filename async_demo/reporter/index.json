{
  "stats": {
    "suites": 2,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2017-07-24T17:22:33.426Z",
    "end": "2017-07-24T17:22:34.326Z",
    "duration": 900,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n",
        "suites": [],
        "tests": [
          {
            "title": "concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
            "timedOut": false,
            "duration": 315,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  \"concat：对集合中的元素进行异步操作，将结果集合并成一个数组\",\n  \"var test_concat = function (arr){\\r\\n\\t\\treturn new Promise(function(resolve,reject){\\r\\n\\t\\t\\tasync.concat(arr,query_article_by_id,function(err,results){\\r\\n\\t\\t\\t\\tresolve(results);\\r\\n\\t\\t\\t});\\r\\n\\t\\t});\\r\\n\\t}\"\n]",
            "code": "addContext(this, \"concat：对集合中的元素进行异步操作，将结果集合并成一个数组\");\naddContext(this, \"var test_concat = \"+coll.test_concat);\nreturn coll.test_concat([1,2,3]).then(function(data,err){\n\texpect(data).to.be.an(\"array\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7373098e-58d4-45ab-ac6b-ddaf53ecc117",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"detect：得到集合中满足条件的第一个数据\"",
            "code": "addContext(this, \"detect：得到集合中满足条件的第一个数据\");\nreturn coll.test_detect([1,2,3]).then(function(data,err){\n\texpect([1,2,3]).to.include(data);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "76ac9007-2461-4e2b-bb16-31e377b480f8",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"each：对集合中每个元素进行异步操作\"",
            "code": "addContext(this, \"each：对集合中每个元素进行异步操作\");\nreturn coll.test_each([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "312e77d7-3b7a-4244-b4d4-6e71cedd1589",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
            "timedOut": false,
            "duration": 115,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"eachOf：对集合中每个元素进行异步操作, 可以每个元素在集合中的索引\"",
            "code": "addContext(this, \"eachOf：对集合中每个元素进行异步操作, 可以每个元素在集合中的索引\");\nreturn coll.test_eachOf([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bec606e9-97b1-4116-a706-52529846da44",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
            "timedOut": false,
            "duration": 100,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"every/all：集合中是否每个元素都满足条件\"",
            "code": "addContext(this, \"every/all：集合中是否每个元素都满足条件\");\nreturn coll.test_every([0,2,3]).then(function(data,err){\n\texpect(data).to.not.be.ok;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0e5182ef-b7b8-4d55-a929-b00cf89a095f",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\"",
            "code": "addContext(this, \"filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\");",
            "err": {},
            "isRoot": false,
            "uuid": "8b6845ff-8076-4dd3-8f10-ab390c7296ed",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"groupBy：对集合中元素使用异步操作进行分组，得到分组后的集合\"",
            "code": "addContext(this, \"groupBy：对集合中元素使用异步操作进行分组，得到分组后的集合\");",
            "err": {},
            "isRoot": false,
            "uuid": "02160d8b-36c1-4143-873e-1aab91618ad5",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "map【集合映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n map【集合映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"map：对集合中的每个元素通过异步操作得到另一个值，组成新的数组\"",
            "code": "addContext(this, \"map：对集合中的每个元素通过异步操作得到另一个值，组成新的数组\");",
            "err": {},
            "isRoot": false,
            "uuid": "0b5aeace-6d68-43c1-bdaa-66ea2fa63add",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "mapValues【map值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n mapValues【map值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"mapValues：对map中的每个键值对通过异步操作得到另一组相同键不同值的键值对，组成新的map\"",
            "code": "addContext(this, \"mapValues：对map中的每个键值对通过异步操作得到另一组相同键不同值的键值对，组成新的map\");",
            "err": {},
            "isRoot": false,
            "uuid": "79ee72b0-98e6-42e1-bc82-b65b493e931c",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\"",
            "code": "addContext(this, \"reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\");",
            "err": {},
            "isRoot": false,
            "uuid": "a41d01ac-3477-4467-bb40-c07d5f960f24",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"some/any：集合中是否有至少一个元素满足条件\"",
            "code": "addContext(this, \"some/any：集合中是否有至少一个元素满足条件\");",
            "err": {},
            "isRoot": false,
            "uuid": "54367e80-4b70-4c5c-9808-bdc45ea6e658",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\"",
            "code": "addContext(this, \"reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\");",
            "err": {},
            "isRoot": false,
            "uuid": "efa32be4-d77d-4887-8209-cb8090bed8ab",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\"",
            "code": "addContext(this, \"sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\");",
            "err": {},
            "isRoot": false,
            "uuid": "8c4d6eb2-51d4-4630-9877-84ff7cb2fa8d",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"transform：与reduce相似，使用一个初始容器集合中每一个元素进行异步操作，最后得到转换后的容器\"",
            "code": "addContext(this, \"transform：与reduce相似，使用一个初始容器集合中每一个元素进行异步操作，最后得到转换后的容器\");",
            "err": {},
            "isRoot": false,
            "uuid": "db7443e9-907c-4f01-9682-9d0de5ed8a0b",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\coll.test.js",
        "uuid": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "D:\\coding\\git_repository\\utils\\async_demo\\test\\coll.test.js",
        "passes": [
          {
            "title": "concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
            "timedOut": false,
            "duration": 315,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  \"concat：对集合中的元素进行异步操作，将结果集合并成一个数组\",\n  \"var test_concat = function (arr){\\r\\n\\t\\treturn new Promise(function(resolve,reject){\\r\\n\\t\\t\\tasync.concat(arr,query_article_by_id,function(err,results){\\r\\n\\t\\t\\t\\tresolve(results);\\r\\n\\t\\t\\t});\\r\\n\\t\\t});\\r\\n\\t}\"\n]",
            "code": "addContext(this, \"concat：对集合中的元素进行异步操作，将结果集合并成一个数组\");\naddContext(this, \"var test_concat = \"+coll.test_concat);\nreturn coll.test_concat([1,2,3]).then(function(data,err){\n\texpect(data).to.be.an(\"array\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7373098e-58d4-45ab-ac6b-ddaf53ecc117",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"detect：得到集合中满足条件的第一个数据\"",
            "code": "addContext(this, \"detect：得到集合中满足条件的第一个数据\");\nreturn coll.test_detect([1,2,3]).then(function(data,err){\n\texpect([1,2,3]).to.include(data);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "76ac9007-2461-4e2b-bb16-31e377b480f8",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"each：对集合中每个元素进行异步操作\"",
            "code": "addContext(this, \"each：对集合中每个元素进行异步操作\");\nreturn coll.test_each([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "312e77d7-3b7a-4244-b4d4-6e71cedd1589",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
            "timedOut": false,
            "duration": 115,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"eachOf：对集合中每个元素进行异步操作, 可以每个元素在集合中的索引\"",
            "code": "addContext(this, \"eachOf：对集合中每个元素进行异步操作, 可以每个元素在集合中的索引\");\nreturn coll.test_eachOf([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bec606e9-97b1-4116-a706-52529846da44",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
            "timedOut": false,
            "duration": 100,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"every/all：集合中是否每个元素都满足条件\"",
            "code": "addContext(this, \"every/all：集合中是否每个元素都满足条件\");\nreturn coll.test_every([0,2,3]).then(function(data,err){\n\texpect(data).to.not.be.ok;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0e5182ef-b7b8-4d55-a929-b00cf89a095f",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\"",
            "code": "addContext(this, \"filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\");",
            "err": {},
            "isRoot": false,
            "uuid": "8b6845ff-8076-4dd3-8f10-ab390c7296ed",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"groupBy：对集合中元素使用异步操作进行分组，得到分组后的集合\"",
            "code": "addContext(this, \"groupBy：对集合中元素使用异步操作进行分组，得到分组后的集合\");",
            "err": {},
            "isRoot": false,
            "uuid": "02160d8b-36c1-4143-873e-1aab91618ad5",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "map【集合映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n map【集合映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"map：对集合中的每个元素通过异步操作得到另一个值，组成新的数组\"",
            "code": "addContext(this, \"map：对集合中的每个元素通过异步操作得到另一个值，组成新的数组\");",
            "err": {},
            "isRoot": false,
            "uuid": "0b5aeace-6d68-43c1-bdaa-66ea2fa63add",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "mapValues【map值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n mapValues【map值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"mapValues：对map中的每个键值对通过异步操作得到另一组相同键不同值的键值对，组成新的map\"",
            "code": "addContext(this, \"mapValues：对map中的每个键值对通过异步操作得到另一组相同键不同值的键值对，组成新的map\");",
            "err": {},
            "isRoot": false,
            "uuid": "79ee72b0-98e6-42e1-bc82-b65b493e931c",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\"",
            "code": "addContext(this, \"reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\");",
            "err": {},
            "isRoot": false,
            "uuid": "a41d01ac-3477-4467-bb40-c07d5f960f24",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"some/any：集合中是否有至少一个元素满足条件\"",
            "code": "addContext(this, \"some/any：集合中是否有至少一个元素满足条件\");",
            "err": {},
            "isRoot": false,
            "uuid": "54367e80-4b70-4c5c-9808-bdc45ea6e658",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\"",
            "code": "addContext(this, \"reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\");",
            "err": {},
            "isRoot": false,
            "uuid": "efa32be4-d77d-4887-8209-cb8090bed8ab",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\"",
            "code": "addContext(this, \"sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\");",
            "err": {},
            "isRoot": false,
            "uuid": "8c4d6eb2-51d4-4630-9877-84ff7cb2fa8d",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
            "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"transform：与reduce相似，使用一个初始容器集合中每一个元素进行异步操作，最后得到转换后的容器\"",
            "code": "addContext(this, \"transform：与reduce相似，使用一个初始容器集合中每一个元素进行异步操作，最后得到转换后的容器\");",
            "err": {},
            "isRoot": false,
            "uuid": "db7443e9-907c-4f01-9682-9d0de5ed8a0b",
            "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 14,
        "totalPasses": 14,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 831,
        "rootEmpty": false
      },
      {
        "title": "async模块Control Flow测试",
        "suites": [],
        "tests": [
          {
            "title": "applyEach【遍历应用】测试：并行遍历，统一回调",
            "fullTitle": "async模块Control Flow测试 applyEach【遍历应用】测试：并行遍历，统一回调",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\"",
            "code": "addContext(this, \"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\");\nvar laugh = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"laughing....\");\n\tcallback2(\"all finished....\");\n}\nvar cry = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"cry.....\");\n\tcallback2(\"all finished....\");\n}\t\nreturn coll.test_applyEach([laugh,cry],\"snooby\",\"test\",function(result){\n\tconsole.log(\"callback1:\"+result);\n},function(results){\n\tconsole.log(\"callback2:\"+results);\n}).then(function(data,err){\n\texpect(data).to.be.eq(\"all finished....\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "01c45994-0220-41c6-a7ee-221beca4753f",
            "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "auto【自动任务】测试：自动切换流程控制，返回结果映射",
            "fullTitle": "async模块Control Flow测试 auto【自动任务】测试：自动切换流程控制，返回结果映射",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  \"1.无依赖方法参数为（callback）,callback返回结果\",\n  \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\",\n  \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\"\n]",
            "code": "addContext(this, \"1.无依赖方法参数为（callback）,callback返回结果\");\naddContext(this, \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\");\naddContext(this, \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_auto({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(results,callback){\n\t\tconsole.log(results);\n\t\tcallback(null,\"eat all..\");\n\t}]\n},2).then(function(data,err){\n\texpect(data).to.be.an(\"Object\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1e7ac0b8-7415-48b4-9a1c-49e32df15220",
            "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "autoInject【依赖注入】测试：auto的依赖注入版本",
            "fullTitle": "async模块Control Flow测试 autoInject【依赖注入】测试：auto的依赖注入版本",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"相较于auto有更纯净的语法糖，自动注入将依赖方法的结果作为参数直接传递\"",
            "code": "addContext(this, \"相较于auto有更纯净的语法糖，自动注入将依赖方法的结果作为参数直接传递\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_autoInject({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(laugh,cry,callback){\n\t\tconsole.log(\"laugh:\"+laugh);\n\t\tconsole.log(\"cry:\"+cry);\n\t\tcallback(null,\"eat all..\");\n\t}]\n}).then(function(data,err){\n\texpect(data).to.be.an(\"Object\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "49cc1e24-43c1-47ec-a7df-ca2018fd5694",
            "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "cargo【搬运】测试：监听每一批task入栈并处理",
            "fullTitle": "async模块Control Flow测试 cargo【搬运】测试：监听每一批task入栈并处理",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"一个worker处理多个task，task处理完成后调用回调方法，payload表示每一批的task数量,不指定则为无限制\"",
            "code": "addContext(this,\"一个worker处理多个task，task处理完成后调用回调方法，payload表示每一批的task数量,不指定则为无限制\");\nreturn coll.test_cargo(function(tasks,callback){\n\tconsole.log(tasks);\n\tcallback.call();\n},2).then(function(data,err){\n\tdata.push({name:\"andy\"},function(err){\n\t\tconsole.log(\"andy say hi \");\n\t});\n\tdata.push({name:\"turner\"},function(err){\n\t\tconsole.log(\"turner say hi \");\n\t});\n\texpect(data).to.be.an(\"object\");\n})",
            "err": {},
            "isRoot": false,
            "uuid": "41bea242-940c-4bdb-98e6-085086f91d52",
            "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\coll.test.js",
        "uuid": "45007cc5-8263-4159-a9c4-196bab2673e7",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "D:\\coding\\git_repository\\utils\\async_demo\\test\\coll.test.js",
        "passes": [
          {
            "title": "applyEach【遍历应用】测试：并行遍历，统一回调",
            "fullTitle": "async模块Control Flow测试 applyEach【遍历应用】测试：并行遍历，统一回调",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\"",
            "code": "addContext(this, \"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\");\nvar laugh = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"laughing....\");\n\tcallback2(\"all finished....\");\n}\nvar cry = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"cry.....\");\n\tcallback2(\"all finished....\");\n}\t\nreturn coll.test_applyEach([laugh,cry],\"snooby\",\"test\",function(result){\n\tconsole.log(\"callback1:\"+result);\n},function(results){\n\tconsole.log(\"callback2:\"+results);\n}).then(function(data,err){\n\texpect(data).to.be.eq(\"all finished....\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "01c45994-0220-41c6-a7ee-221beca4753f",
            "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "auto【自动任务】测试：自动切换流程控制，返回结果映射",
            "fullTitle": "async模块Control Flow测试 auto【自动任务】测试：自动切换流程控制，返回结果映射",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  \"1.无依赖方法参数为（callback）,callback返回结果\",\n  \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\",\n  \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\"\n]",
            "code": "addContext(this, \"1.无依赖方法参数为（callback）,callback返回结果\");\naddContext(this, \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\");\naddContext(this, \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_auto({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(results,callback){\n\t\tconsole.log(results);\n\t\tcallback(null,\"eat all..\");\n\t}]\n},2).then(function(data,err){\n\texpect(data).to.be.an(\"Object\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1e7ac0b8-7415-48b4-9a1c-49e32df15220",
            "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "autoInject【依赖注入】测试：auto的依赖注入版本",
            "fullTitle": "async模块Control Flow测试 autoInject【依赖注入】测试：auto的依赖注入版本",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"相较于auto有更纯净的语法糖，自动注入将依赖方法的结果作为参数直接传递\"",
            "code": "addContext(this, \"相较于auto有更纯净的语法糖，自动注入将依赖方法的结果作为参数直接传递\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_autoInject({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(laugh,cry,callback){\n\t\tconsole.log(\"laugh:\"+laugh);\n\t\tconsole.log(\"cry:\"+cry);\n\t\tcallback(null,\"eat all..\");\n\t}]\n}).then(function(data,err){\n\texpect(data).to.be.an(\"Object\");\n});",
            "err": {},
            "isRoot": false,
            "uuid": "49cc1e24-43c1-47ec-a7df-ca2018fd5694",
            "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "cargo【搬运】测试：监听每一批task入栈并处理",
            "fullTitle": "async模块Control Flow测试 cargo【搬运】测试：监听每一批task入栈并处理",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"一个worker处理多个task，task处理完成后调用回调方法，payload表示每一批的task数量,不指定则为无限制\"",
            "code": "addContext(this,\"一个worker处理多个task，task处理完成后调用回调方法，payload表示每一批的task数量,不指定则为无限制\");\nreturn coll.test_cargo(function(tasks,callback){\n\tconsole.log(tasks);\n\tcallback.call();\n},2).then(function(data,err){\n\tdata.push({name:\"andy\"},function(err){\n\t\tconsole.log(\"andy say hi \");\n\t});\n\tdata.push({name:\"turner\"},function(err){\n\t\tconsole.log(\"turner say hi \");\n\t});\n\texpect(data).to.be.an(\"object\");\n})",
            "err": {},
            "isRoot": false,
            "uuid": "41bea242-940c-4bdb-98e6-085086f91d52",
            "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 20,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "a9f0334d-73e8-4fd5-a382-85de966937bb",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
      "timedOut": false,
      "duration": 315,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"concat：对集合中的元素进行异步操作，将结果集合并成一个数组\",\n  \"var test_concat = function (arr){\\r\\n\\t\\treturn new Promise(function(resolve,reject){\\r\\n\\t\\t\\tasync.concat(arr,query_article_by_id,function(err,results){\\r\\n\\t\\t\\t\\tresolve(results);\\r\\n\\t\\t\\t});\\r\\n\\t\\t});\\r\\n\\t}\"\n]",
      "code": "addContext(this, \"concat：对集合中的元素进行异步操作，将结果集合并成一个数组\");\naddContext(this, \"var test_concat = \"+coll.test_concat);\nreturn coll.test_concat([1,2,3]).then(function(data,err){\n\texpect(data).to.be.an(\"array\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7373098e-58d4-45ab-ac6b-ddaf53ecc117",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
      "timedOut": false,
      "duration": 101,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"detect：得到集合中满足条件的第一个数据\"",
      "code": "addContext(this, \"detect：得到集合中满足条件的第一个数据\");\nreturn coll.test_detect([1,2,3]).then(function(data,err){\n\texpect([1,2,3]).to.include(data);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "76ac9007-2461-4e2b-bb16-31e377b480f8",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
      "timedOut": false,
      "duration": 200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"each：对集合中每个元素进行异步操作\"",
      "code": "addContext(this, \"each：对集合中每个元素进行异步操作\");\nreturn coll.test_each([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "312e77d7-3b7a-4244-b4d4-6e71cedd1589",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
      "timedOut": false,
      "duration": 115,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"eachOf：对集合中每个元素进行异步操作, 可以每个元素在集合中的索引\"",
      "code": "addContext(this, \"eachOf：对集合中每个元素进行异步操作, 可以每个元素在集合中的索引\");\nreturn coll.test_eachOf([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bec606e9-97b1-4116-a706-52529846da44",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"every/all：集合中是否每个元素都满足条件\"",
      "code": "addContext(this, \"every/all：集合中是否每个元素都满足条件\");\nreturn coll.test_every([0,2,3]).then(function(data,err){\n\texpect(data).to.not.be.ok;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0e5182ef-b7b8-4d55-a929-b00cf89a095f",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\"",
      "code": "addContext(this, \"filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\");",
      "err": {},
      "isRoot": false,
      "uuid": "8b6845ff-8076-4dd3-8f10-ab390c7296ed",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"groupBy：对集合中元素使用异步操作进行分组，得到分组后的集合\"",
      "code": "addContext(this, \"groupBy：对集合中元素使用异步操作进行分组，得到分组后的集合\");",
      "err": {},
      "isRoot": false,
      "uuid": "02160d8b-36c1-4143-873e-1aab91618ad5",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "map【集合映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n map【集合映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"map：对集合中的每个元素通过异步操作得到另一个值，组成新的数组\"",
      "code": "addContext(this, \"map：对集合中的每个元素通过异步操作得到另一个值，组成新的数组\");",
      "err": {},
      "isRoot": false,
      "uuid": "0b5aeace-6d68-43c1-bdaa-66ea2fa63add",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mapValues【map值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n mapValues【map值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"mapValues：对map中的每个键值对通过异步操作得到另一组相同键不同值的键值对，组成新的map\"",
      "code": "addContext(this, \"mapValues：对map中的每个键值对通过异步操作得到另一组相同键不同值的键值对，组成新的map\");",
      "err": {},
      "isRoot": false,
      "uuid": "79ee72b0-98e6-42e1-bc82-b65b493e931c",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\"",
      "code": "addContext(this, \"reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\");",
      "err": {},
      "isRoot": false,
      "uuid": "a41d01ac-3477-4467-bb40-c07d5f960f24",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"some/any：集合中是否有至少一个元素满足条件\"",
      "code": "addContext(this, \"some/any：集合中是否有至少一个元素满足条件\");",
      "err": {},
      "isRoot": false,
      "uuid": "54367e80-4b70-4c5c-9808-bdc45ea6e658",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\"",
      "code": "addContext(this, \"reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\");",
      "err": {},
      "isRoot": false,
      "uuid": "efa32be4-d77d-4887-8209-cb8090bed8ab",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\"",
      "code": "addContext(this, \"sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\");",
      "err": {},
      "isRoot": false,
      "uuid": "8c4d6eb2-51d4-4630-9877-84ff7cb2fa8d",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"transform：与reduce相似，使用一个初始容器集合中每一个元素进行异步操作，最后得到转换后的容器\"",
      "code": "addContext(this, \"transform：与reduce相似，使用一个初始容器集合中每一个元素进行异步操作，最后得到转换后的容器\");",
      "err": {},
      "isRoot": false,
      "uuid": "db7443e9-907c-4f01-9682-9d0de5ed8a0b",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "applyEach【遍历应用】测试：并行遍历，统一回调",
      "fullTitle": "async模块Control Flow测试 applyEach【遍历应用】测试：并行遍历，统一回调",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\"",
      "code": "addContext(this, \"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\");\nvar laugh = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"laughing....\");\n\tcallback2(\"all finished....\");\n}\nvar cry = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"cry.....\");\n\tcallback2(\"all finished....\");\n}\t\nreturn coll.test_applyEach([laugh,cry],\"snooby\",\"test\",function(result){\n\tconsole.log(\"callback1:\"+result);\n},function(results){\n\tconsole.log(\"callback2:\"+results);\n}).then(function(data,err){\n\texpect(data).to.be.eq(\"all finished....\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "01c45994-0220-41c6-a7ee-221beca4753f",
      "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "auto【自动任务】测试：自动切换流程控制，返回结果映射",
      "fullTitle": "async模块Control Flow测试 auto【自动任务】测试：自动切换流程控制，返回结果映射",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"1.无依赖方法参数为（callback）,callback返回结果\",\n  \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\",\n  \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\"\n]",
      "code": "addContext(this, \"1.无依赖方法参数为（callback）,callback返回结果\");\naddContext(this, \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\");\naddContext(this, \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_auto({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(results,callback){\n\t\tconsole.log(results);\n\t\tcallback(null,\"eat all..\");\n\t}]\n},2).then(function(data,err){\n\texpect(data).to.be.an(\"Object\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1e7ac0b8-7415-48b4-9a1c-49e32df15220",
      "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "autoInject【依赖注入】测试：auto的依赖注入版本",
      "fullTitle": "async模块Control Flow测试 autoInject【依赖注入】测试：auto的依赖注入版本",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"相较于auto有更纯净的语法糖，自动注入将依赖方法的结果作为参数直接传递\"",
      "code": "addContext(this, \"相较于auto有更纯净的语法糖，自动注入将依赖方法的结果作为参数直接传递\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_autoInject({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(laugh,cry,callback){\n\t\tconsole.log(\"laugh:\"+laugh);\n\t\tconsole.log(\"cry:\"+cry);\n\t\tcallback(null,\"eat all..\");\n\t}]\n}).then(function(data,err){\n\texpect(data).to.be.an(\"Object\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "49cc1e24-43c1-47ec-a7df-ca2018fd5694",
      "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cargo【搬运】测试：监听每一批task入栈并处理",
      "fullTitle": "async模块Control Flow测试 cargo【搬运】测试：监听每一批task入栈并处理",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"一个worker处理多个task，task处理完成后调用回调方法，payload表示每一批的task数量,不指定则为无限制\"",
      "code": "addContext(this,\"一个worker处理多个task，task处理完成后调用回调方法，payload表示每一批的task数量,不指定则为无限制\");\nreturn coll.test_cargo(function(tasks,callback){\n\tconsole.log(tasks);\n\tcallback.call();\n},2).then(function(data,err){\n\tdata.push({name:\"andy\"},function(err){\n\t\tconsole.log(\"andy say hi \");\n\t});\n\tdata.push({name:\"turner\"},function(err){\n\t\tconsole.log(\"turner say hi \");\n\t});\n\texpect(data).to.be.an(\"object\");\n})",
      "err": {},
      "isRoot": false,
      "uuid": "41bea242-940c-4bdb-98e6-085086f91d52",
      "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n concat【连接】测试：iteratee遍历完所有集合后才会调用handler,每次遍历向callback传入的参数组成一个集合作为handler的result",
      "timedOut": false,
      "duration": 315,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"concat：对集合中的元素进行异步操作，将结果集合并成一个数组\",\n  \"var test_concat = function (arr){\\r\\n\\t\\treturn new Promise(function(resolve,reject){\\r\\n\\t\\t\\tasync.concat(arr,query_article_by_id,function(err,results){\\r\\n\\t\\t\\t\\tresolve(results);\\r\\n\\t\\t\\t});\\r\\n\\t\\t});\\r\\n\\t}\"\n]",
      "code": "addContext(this, \"concat：对集合中的元素进行异步操作，将结果集合并成一个数组\");\naddContext(this, \"var test_concat = \"+coll.test_concat);\nreturn coll.test_concat([1,2,3]).then(function(data,err){\n\texpect(data).to.be.an(\"array\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7373098e-58d4-45ab-ac6b-ddaf53ecc117",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n detect【监听】测试：得到集合中满足条件的第一个数据，注：handler被调用后iteratee立即停止",
      "timedOut": false,
      "duration": 101,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"detect：得到集合中满足条件的第一个数据\"",
      "code": "addContext(this, \"detect：得到集合中满足条件的第一个数据\");\nreturn coll.test_detect([1,2,3]).then(function(data,err){\n\texpect([1,2,3]).to.include(data);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "76ac9007-2461-4e2b-bb16-31e377b480f8",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n each【遍历】测试：iteratee遍历coll,返回异常时调用handler",
      "timedOut": false,
      "duration": 200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"each：对集合中每个元素进行异步操作\"",
      "code": "addContext(this, \"each：对集合中每个元素进行异步操作\");\nreturn coll.test_each([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "312e77d7-3b7a-4244-b4d4-6e71cedd1589",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n eachOf【索引遍历】测试：iteratee遍历coll,iteratee参数包含index[当前item在coll中的索引],返回异常时调用handler",
      "timedOut": false,
      "duration": 115,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"eachOf：对集合中每个元素进行异步操作, 可以每个元素在集合中的索引\"",
      "code": "addContext(this, \"eachOf：对集合中每个元素进行异步操作, 可以每个元素在集合中的索引\");\nreturn coll.test_eachOf([1,2,3]).then(function(data,err){\n\texpect(data).to.be.empty;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bec606e9-97b1-4116-a706-52529846da44",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n every【校验】测试：与detect相反，iteratee遍历中返回false时立即调用handler，否则等待遍历完成调用，注：无论handler何时被调用，iteratee都会将coll遍历完成",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"every/all：集合中是否每个元素都满足条件\"",
      "code": "addContext(this, \"every/all：集合中是否每个元素都满足条件\");\nreturn coll.test_every([0,2,3]).then(function(data,err){\n\texpect(data).to.not.be.ok;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0e5182ef-b7b8-4d55-a929-b00cf89a095f",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n filter【过滤】测试：过滤掉coll在iteratee中返回false的item，过滤后的coll作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\"",
      "code": "addContext(this, \"filter：对集合中元素使用异步操作进行筛选，得到符合条件的集合\");",
      "err": {},
      "isRoot": false,
      "uuid": "8b6845ff-8076-4dd3-8f10-ab390c7296ed",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n groupBy【分组】测试：对coll进行分组，iteratee中返回的值作为key，coll中相同key的item集合作为value，分组后的集合作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"groupBy：对集合中元素使用异步操作进行分组，得到分组后的集合\"",
      "code": "addContext(this, \"groupBy：对集合中元素使用异步操作进行分组，得到分组后的集合\");",
      "err": {},
      "isRoot": false,
      "uuid": "02160d8b-36c1-4143-873e-1aab91618ad5",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "map【集合映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n map【集合映射】测试：iteratee中对coll中的item进行处理，返回一个新的数组，若抛出异常handler立即执行",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"map：对集合中的每个元素通过异步操作得到另一个值，组成新的数组\"",
      "code": "addContext(this, \"map：对集合中的每个元素通过异步操作得到另一个值，组成新的数组\");",
      "err": {},
      "isRoot": false,
      "uuid": "0b5aeace-6d68-43c1-bdaa-66ea2fa63add",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mapValues【map值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n mapValues【map值映射】测试：与map类似，coll为map，iteratee中对coll中的item.value进行处理，返回一个新的对象{item.key,newVlaue}，分组后的集合作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"mapValues：对map中的每个键值对通过异步操作得到另一组相同键不同值的键值对，组成新的map\"",
      "code": "addContext(this, \"mapValues：对map中的每个键值对通过异步操作得到另一组相同键不同值的键值对，组成新的map\");",
      "err": {},
      "isRoot": false,
      "uuid": "79ee72b0-98e6-42e1-bc82-b65b493e931c",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n reject【排斥】测试：与filter相反，排斥coll在iteratee中返回true的item，排斥后的coll作为handler的result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\"",
      "code": "addContext(this, \"reject：与filter相似，只是判断条件时正好相反，得到剩下的元素的集合\");",
      "err": {},
      "isRoot": false,
      "uuid": "a41d01ac-3477-4467-bb40-c07d5f960f24",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n some/any【任意】测试：当集合中是否有至少一个元素满足条件时，最终callback得到的值为true",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"some/any：集合中是否有至少一个元素满足条件\"",
      "code": "addContext(this, \"some/any：集合中是否有至少一个元素满足条件\");",
      "err": {},
      "isRoot": false,
      "uuid": "54367e80-4b70-4c5c-9808-bdc45ea6e658",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n reduce/reduceRight【换算】测试：给定一个初始值，对集合中的元素做换算，返回换算后的值，如抛出错误停止循环立即执行handler，注：reduce执行方式为串行,默认从左到右,reduceRight从右到左",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\"",
      "code": "addContext(this, \"reduce：使用一个初始值同集合中每一个元素进行异步操作，最后得到一个唯一的结果\");",
      "err": {},
      "isRoot": false,
      "uuid": "efa32be4-d77d-4887-8209-cb8090bed8ab",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n sortBy【排序】测试：对coll根据返回值进行排序，handler的result为排序后的集合",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\"",
      "code": "addContext(this, \"sortBy：对集合中的数据进行异步操作，再根据值从小到大排序\");",
      "err": {},
      "isRoot": false,
      "uuid": "8c4d6eb2-51d4-4630-9877-84ff7cb2fa8d",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
      "fullTitle": "Async模块Collection测试\r\n说明：\r\n每个方法都有三个参数，async.xxxx(coll,iteratee(item,callback),handler(err,result))\r\n  coll：一个集合，集合中的每个元素作为iteratee的item\r\n  iteratee：处理集合中每一个元素的子函数，集合中的每个元素作为第一个入参，第二个入参是系统的一个回调方法，iteratee向其传入的参数与handler有密切关系\r\n  callback：处理iteratee遍历后的结果，第一个参数为异常，第二个参数为回调结果，回调结果不一定是iteratee中回调方法传入的参数，callback根据主函数的不同特性，不一定会立即执行\r\n\r\n  每个方法都有三种形式:\r\n  xxx：iteratee并行\r\n  xxxLimit：iteratee限制并行个数并行\r\n  xxxSeries：iteratee串行\r\n transform【轉化】测试：与reduce类似，给定一个初始容器，返回转换后的容器，如抛出错误停止循环立即执行handler",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"transform：与reduce相似，使用一个初始容器集合中每一个元素进行异步操作，最后得到转换后的容器\"",
      "code": "addContext(this, \"transform：与reduce相似，使用一个初始容器集合中每一个元素进行异步操作，最后得到转换后的容器\");",
      "err": {},
      "isRoot": false,
      "uuid": "db7443e9-907c-4f01-9682-9d0de5ed8a0b",
      "parentUUID": "0c3b68a1-9737-43f7-aff7-3affc02b4e7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "applyEach【遍历应用】测试：并行遍历，统一回调",
      "fullTitle": "async模块Control Flow测试 applyEach【遍历应用】测试：并行遍历，统一回调",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\"",
      "code": "addContext(this, \"主函数中的所有参数都依次作为每个子函数的参数,最后一个参数如果是回调方法则会当所有子函数执行完后才执行\");\nvar laugh = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"laughing....\");\n\tcallback2(\"all finished....\");\n}\nvar cry = function(arg1,arg2,callback1,callback2){\n\tcallback1(arg1+arg2+\"cry.....\");\n\tcallback2(\"all finished....\");\n}\t\nreturn coll.test_applyEach([laugh,cry],\"snooby\",\"test\",function(result){\n\tconsole.log(\"callback1:\"+result);\n},function(results){\n\tconsole.log(\"callback2:\"+results);\n}).then(function(data,err){\n\texpect(data).to.be.eq(\"all finished....\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "01c45994-0220-41c6-a7ee-221beca4753f",
      "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "auto【自动任务】测试：自动切换流程控制，返回结果映射",
      "fullTitle": "async模块Control Flow测试 auto【自动任务】测试：自动切换流程控制，返回结果映射",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "[\n  \"1.无依赖方法参数为（callback）,callback返回结果\",\n  \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\",\n  \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\"\n]",
      "code": "addContext(this, \"1.无依赖方法参数为（callback）,callback返回结果\");\naddContext(this, \"2.有依赖方法参数为（results, callback）,resutls为所依赖方法结果映射\");\naddContext(this, \"3.所有函数执行完毕后执行最终回调方法（err,results）,中途抛出错误，流程立即停止\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_auto({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(results,callback){\n\t\tconsole.log(results);\n\t\tcallback(null,\"eat all..\");\n\t}]\n},2).then(function(data,err){\n\texpect(data).to.be.an(\"Object\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1e7ac0b8-7415-48b4-9a1c-49e32df15220",
      "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "autoInject【依赖注入】测试：auto的依赖注入版本",
      "fullTitle": "async模块Control Flow测试 autoInject【依赖注入】测试：auto的依赖注入版本",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"相较于auto有更纯净的语法糖，自动注入将依赖方法的结果作为参数直接传递\"",
      "code": "addContext(this, \"相较于auto有更纯净的语法糖，自动注入将依赖方法的结果作为参数直接传递\");\nvar laugh = function(callback){\n\tcallback(null,\"laughing....\");\n}\nvar cry = function(callback){\n\tcallback(null,\"cry.....\");\n}\t\nreturn coll.test_autoInject({\n\tlaugh : laugh,\n\tcry : cry,\n\teat : [\"laugh\",\"cry\",function(laugh,cry,callback){\n\t\tconsole.log(\"laugh:\"+laugh);\n\t\tconsole.log(\"cry:\"+cry);\n\t\tcallback(null,\"eat all..\");\n\t}]\n}).then(function(data,err){\n\texpect(data).to.be.an(\"Object\");\n});",
      "err": {},
      "isRoot": false,
      "uuid": "49cc1e24-43c1-47ec-a7df-ca2018fd5694",
      "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cargo【搬运】测试：监听每一批task入栈并处理",
      "fullTitle": "async模块Control Flow测试 cargo【搬运】测试：监听每一批task入栈并处理",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"一个worker处理多个task，task处理完成后调用回调方法，payload表示每一批的task数量,不指定则为无限制\"",
      "code": "addContext(this,\"一个worker处理多个task，task处理完成后调用回调方法，payload表示每一批的task数量,不指定则为无限制\");\nreturn coll.test_cargo(function(tasks,callback){\n\tconsole.log(tasks);\n\tcallback.call();\n},2).then(function(data,err){\n\tdata.push({name:\"andy\"},function(err){\n\t\tconsole.log(\"andy say hi \");\n\t});\n\tdata.push({name:\"turner\"},function(err){\n\t\tconsole.log(\"turner say hi \");\n\t});\n\texpect(data).to.be.an(\"object\");\n})",
      "err": {},
      "isRoot": false,
      "uuid": "41bea242-940c-4bdb-98e6-085086f91d52",
      "parentUUID": "45007cc5-8263-4159-a9c4-196bab2673e7",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}